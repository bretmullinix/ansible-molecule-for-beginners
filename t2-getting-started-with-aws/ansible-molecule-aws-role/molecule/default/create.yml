---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: true
  no_log: "{{ molecule_no_log }}"
  tasks:

    - name: Include the variables needed for creation
      include_vars:
        file: "vars/main.yml"

    - name: Set molecule directory
      set_fact:
        molecule_ephemeral_directory: '{{ lookup(''env'', ''MOLECULE_EPHEMERAL_DIRECTORY'') }}'

    - name: Set the molecule directory private key
      set_fact:
        aws_molecule_private_key_file: "{{ molecule_ephemeral_directory }}/private_key"

    # TODO: Developer must implement and populate 'server' variable
    # Terminate every running instance in a region. Use with EXTREME caution.
    - name: create a new ec2 key pair, returns generated private key
      ec2_key:
        name: "{{ aws_idm_key_pair }}"
        state: absent
      when: create_private_key == true

    - name: create a new ec2 key pair, returns generated private key
      ec2_key:
        name: "{{ aws_idm_key_pair }}"
        state: present
      register: key_pair_details

    - name: Set Key Pair Facts
      set_fact:
        aws_keypair: "{{ key_pair_details['key'] }}"

    - name: Copy the private key to a file so we can ssh into it
      copy:
        content: "{{ aws_keypair['private_key'] }}"
        dest: "{{ aws_private_key }}"
      when: create_private_key == true

    - name: Copy the private key to the molecule config directory
      copy:
        src: "{{ aws_private_key }}"
        dest: "{{ aws_molecule_private_key_file }}"
        mode: 0600

    - name: Populate instance config dict
      set_fact:
        instance_conf_dict: {
               'instance': "{{ item.name }}",
                'address': "{{ item.public_ip }}",
                'user': "{{ item.user  }}",
                'port': "{{ item.port }}",
                'identity_file': "{{ aws_molecule_private_key_file }}", }
      with_items: "{{ aws_instances }}"
      register: instance_config_dict

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

    - name: create a VPC with dedicated tenancy and a couple of tags
      ec2_vpc_net:
        name: vpc_aws
        cidr_block: 10.10.0.0/16
        dns_support: yes
        dns_hostnames: yes
        tags:
          module: "Amazon Cluster VPC"
        tenancy: default
      register: ec2_vpc_net

    - name: Set the VPC Fact
      set_fact:
        vpc: "{{ ec2_vpc_net.vpc }}"

    - name: create ec2 vpc subnet
    # create the subnet for the vpc with a cidr block
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.id }}"
        state: present
        cidr: "10.10.0.0/24"
        # enable public ip
        map_public: yes
        resource_tags:
          Name: "aws_subnet"
      register: subnet_result

    - name: create ec2 vpc internet gateway
      # create an internet gateway for the vpc
      ec2_vpc_igw:
        vpc_id: "{{ vpc.id }}"
        state: present
        tags:
          Name: "aws_cluster_gateway"
      register: igw

    - name: Set the VPC Subnet Fact
      set_fact:
        vpc_subnet: "{{ subnet_result['subnet'] }}"

    - name: Debug Subnet
      debug:
        msg: "Here is your subnet:  {{ vpc_subnet.id }}"

    # create routing to/from internet
    - name: Route IGW
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.id }}"
        subnets:
          - "{{ vpc_subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id  }}"
        tags:
          Name: "aws_cluster_route"

    - name: openshift cluster with idm ec2 group
      ec2_group:
        name: aws_security_group
        description: The security group for the Openshift Cluster with IDM
        vpc_id: "{{ vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
        tags:
          Name: "aws_security_group"
      register: security_group


    # Single instance with ssd gp2 root volume
    - name: Create IDM EC2 Instance
      ec2:
        key_name: "{{ aws_key_pair }}"
        group: "aws_security_group"
        instance_type: t2.medium
        image: "{{ aws_ami }}"
        wait: yes
        wait_timeout: 500
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 20
            delete_on_termination: true
        vpc_subnet_id: "{{ vpc_subnet.id }}"
        assign_public_ip: yes
        count_tag:
          Name: "{{ aws_instance_name }}"
        instance_tags:
          Name: "{{ aws_instance_name }}"
        exact_count: 1
      register: ec2_facts

    - name: Print EC2 facts
      debug:
        var: ec2_facts

    - name: Set public ip address for ec2 instance
      set_fact:
        aws_public_ip: "{{ ec2_facts.tagged_instances[0].public_ip }}"

    - name: Populate instance config dict
      set_fact:
        instance_conf_dict: {
               'instance': "{{ item.name }}",
                'address': "{{ aws_public_ip }}",
                'user': "{{ item.user  }}",
                'port': "{{ item.port }}",
                'identity_file': "{{ aws_molecule_private_key_file }}",
                'become_method': "sudo",
                'become_ask_pass': false,

                }
      with_items: "{{ aws_instances }}"
      register: instance_config_dict

    - name: Debug variable
      debug:
        var: instance_config_dict


    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

    - name: Print instance_conf list
      debug:
        var:  instance_conf

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"


    - name: Wait for SSH
      wait_for:
        port: 22
        host: "{{ aws_public_ip }}"
        search_regex: SSH
        delay: 10
        timeout: 320

    - name: Wait for boot process to finish
      pause:
        minutes: 2
